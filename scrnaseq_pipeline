# load libraries
library(dplyr)
library(magrittr)
library(Seurat)
library(tidyverse)

# Read data
gaba <- read.delim("0hrgaba.csv", sep=',', stringsAsFactors = F, header = T)

# Initialize the Seurat object with the raw (non-normalized data).
gaba_b1_0hr.seurat.obj <- CreateSeuratObject(counts = gaba, project = "gaba_b1_0hr", min.cells = 3, min.features = 200)
str(gaba_b1_0hr.seurat.obj)
gaba_b1_0hr.seurat.obj

# 1. QC -------
View(gaba_b1_0hr.seurat.obj)
# % MT reads
gaba_b1_0hr.seurat.obj[["percent.mt"]] <- PercentageFeatureSet(gaba_b1_0hr.seurat.obj, pattern = "^MT-")
View(gaba_b1_0hr.seurat.obj@meta.data)

VlnPlot(gaba_b1_0hr.seurat.obj, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
FeatureScatter(gaba_b1_0hr.seurat.obj, feature1 = "nCount_RNA", feature2 = "nFeature_RNA") +
  geom_smooth(method = 'lm')

# 2. Filtering -----------------
gaba_b1_0hr.seurat.obj <- subset(gaba_b1_0hr.seurat.obj, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & 
                                   percent.mt < 5)

# 3. Normalize data ----------
#gaba_b1_0hr.seurat.obj <- NormalizeData(gaba_b1_0hr.seurat.obj, normalization.method = "LogNormalize", scale.factor = 10000)
# OR
gaba_b1_0hr.seurat.obj <- NormalizeData(gaba_b1_0hr.seurat.obj)
str(gaba_b1_0hr.seurat.obj)


# 4. Identify highly variable features --------------
gaba_b1_0hr.seurat.obj <- FindVariableFeatures(gaba_b1_0hr.seurat.obj, selection.method = "vst", nfeatures = 2000)

# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(gaba_b1_0hr.seurat.obj), 10)

# plot variable features with and without labels
plot1 <- VariableFeaturePlot(gaba_b1_0hr.seurat.obj)
LabelPoints(plot = plot1, points = top10, repel = TRUE)


# 5. Scaling -------------
all.genes <- rownames(gaba_b1_0hr.seurat.obj)
gaba_b1_0hr.seurat.obj <- ScaleData(gaba_b1_0hr.seurat.obj, features = all.genes)

str(gaba_b1_0hr.seurat.obj)

# 6. Perform Linear dimensionality reduction --------------
gaba_b1_0hr.seurat.obj <- RunPCA(gaba_b1_0hr.seurat.obj, features = VariableFeatures(object = gaba_b1_0hr.seurat.obj))

# visualize PCA results
print(gaba_b1_0hr.seurat.obj[["pca"]], dims = 1:5, nfeatures = 5)
DimHeatmap(gaba_b1_0hr.seurat.obj, dims = 1, cells = 500, balanced = TRUE)


# determine dimensionality of the data
ElbowPlot(gaba_b1_0hr.seurat.obj)


# 7. Clustering ------------
gaba_b1_0hr.seurat.obj <- FindNeighbors(gaba_b1_0hr.seurat.obj, dims = 1:15)

# understanding resolution
gaba_b1_0hr.seurat.obj <- FindClusters(gaba_b1_0hr.seurat.obj, resolution = c(0.1,0.3, 0.5, 0.6, 0.7, 1))
View(gaba_b1_0hr.seurat.obj@meta.data)

DimPlot(gaba_b1_0hr.seurat.obj, group.by = "RNA_snn_res.0.6", label = TRUE)

# setting identity of clusters
Idents(gaba_b1_0hr.seurat.obj)
Idents(gaba_b1_0hr.seurat.obj) <- "RNA_snn_res.0.6"
Idents(gaba_b1_0hr.seurat.obj)

# non-linear dimensionality reduction --------------
# If you haven't installed UMAP, you can do so via reticulate::py_install(packages =
# 'umap-learn')
gaba_b1_0hr.seurat.obj <- RunUMAP(gaba_b1_0hr.seurat.obj, dims = 1:14, label = TRUE)
# note that you can set `label = TRUE` or use the LabelClusters function to help label
# individual clusters
DimPlot(gaba_b1_0hr.seurat.obj, reduction = "umap", label = TRUE)

# Save normalized counts as csv
write.table(as.matrix(GetAssayData(object = gaba_b1_0hr.seurat.obj, slot = "data")), 'gabab2_0hr_Normalized.csv', sep = ",", row.names = T, col.names = T, quote = F)

# Identify genes in UMAP clusters
cluster0.markers <- FindMarkers(gaba_b1_0hr.seurat.obj, ident.1 = 0, min.pct = 0.25)
head(cluster0.markers, n = 10)

# find all markers distinguishing cluster 9 from clusters 1 and 7
cluster4.markers <- FindMarkers(gaba_b1_0hr.seurat.obj, ident.1 = 9, ident.2 = c(1, 7), min.pct = 0.25)
head(cluster4.markers, n = 10)

#UMAP Showing where in clusters specific genes are located
FeaturePlot(gaba_b1_0hr.seurat.obj, features = c("SPARC", "VIM", "EYA4", "DLX1", "NKX2-1", "LHX6", "DCX", "MAP2", "SOX2"))

#Look at cell cycle scoring of each cell
data <- CellCycleScoring(gaba_b1_0hr.seurat.obj, s.features = cc.genes.updated.2019$s.genes, g2m.features = cc.genes.updated.2019$g2m.genes, set.ident = TRUE)
view(data)

#Graph # of cells in each phase
as_tibble(data[[]]) %>%
  ggplot(aes(Phase)) + geom_bar()

as_tibble(data[[]]) %>%
  ggplot(aes(x=S.Score, y=G2M.Score, color=Phase)) + 
  geom_point() +
  coord_cartesian(xlim=c(-0.15,0.15), ylim=c(-0.15,0.15))
